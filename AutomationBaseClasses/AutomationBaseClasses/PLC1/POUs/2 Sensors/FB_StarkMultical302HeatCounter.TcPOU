<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.10">
  <POU Name="FB_StarkMultical302HeatCounter" Id="{fc57c7ac-75b9-464b-ac2a-2bb639024ff7}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_StarkMultical302HeatCounter
VAR_INPUT
	aHeatCounterTelegramm : ARRAY[1..cMBUS_MaxTelegrams] OF ST_MBus_Data2;
END_VAR
VAR_OUTPUT
	fFeedTemperature : REAL; //°C
	fReturnTemperazure : REAL; //°C
	fVolumeFlowRate : REAL; //m3/h
END_VAR
VAR
	{attribute 'OPC.UA.DA' := '1'}
	sensorState : ST_StarkMultical302HeatCounterState;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//set sensor state
sensorState.fVolume := STRING_TO_REAL(aHeatCounterTelegramm[1].arrData[6].sValue);
sensorState.fFeedTemperature := STRING_TO_REAL(aHeatCounterTelegramm[1].arrData[9].sValue);
sensorState.fReturnTemperature := STRING_TO_REAL(aHeatCounterTelegramm[1].arrData[10].sValue);
sensorState.fVolumeFlowRate := STRING_TO_REAL(aHeatCounterTelegramm[1].arrData[14].sValue);
sensorState.fHeatEnergy := STRING_TO_REAL(aHeatCounterTelegramm[1].arrData[2].sValue)/1000000;
sensorState.fTemperatureDifference := STRING_TO_REAL(aHeatCounterTelegramm[1].arrData[11].sValue);

//calculate fHeatFlowRate because heat meter does not measure negative flows
sensorState.fHeatFlowRate := sensorState.fVolumeFlowRate/3.6*4.19*sensorState.fTemperatureDifference;

//set outputs
fFeedTemperature := sensorState.fFeedTemperature;
fReturnTemperazure := sensorState.fReturnTemperature;
fVolumeFlowRate := sensorState.fVolumeFlowRate;]]></ST>
    </Implementation>
    <LineIds Name="FB_StarkMultical302HeatCounter">
      <LineId Id="21" Count="13" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>