<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.10">
  <POU Name="FB_MixingValve" Id="{60dbc338-d028-4fcc-a2a7-9fe749ce4d3c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MixingValve EXTENDS FB_ActuatorContinous
VAR_INPUT
	nControlModeAutomatic : E_MixingValveControlMode;
	fTemperatureExternal : REAL; //External temperature in °C
	fThermalPowerExternal : REAL; //external heat power in kW
END_VAR
VAR_OUTPUT
END_VAR
VAR	
	{attribute 'OPC.UA.DA' := '1'}
	localSetParameters 			: ST_MixingValveSetParameters;
	
	//default parameters
	localDefaultParameters 		: ST_MixingValveDefaultParameters;	

	//analog converters for 0 - 10 V i/o signals
	InputConverter 				: FB_AnalogInput(fLowerLimit := 0, fUpperLimit := 100);
	OutputConverter 			: FB_AnalogOutput(fLowerLimit := 0, fUpperLimit := 100);
	
	//I/O Links
	nSetPoint_OUT		AT %Q* : INT; //Set position linked to terminal
	nOperatingPoint_IN 	AT %I* : INT; //Actual valve position linked to terminal
	
	//internal variables
	nControlMode				: E_MixingValveControlMode;	
	fSetPoint_internal 			: REAL; //internal, control mode depending setpoint between 0.0 and 100.0
	
	//controllers
	PI_Controller_Heating		: FB_CTRL_PI; 
	PI_Controller_Cooling		: FB_CTRL_PI;
	PI_Controller_ThermalPower	: FB_CTRL_PI;
	PI_Controller_Parameters 	: ST_CTRL_PI_PARAMS;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[MAIN();
SelectLocalControlMode();
LocalControl();
InputConverter(nValue := nOperatingPoint_IN, fOffset := localDefaultParameters.fOffsetTerminal);
OutputConverter(fValue := fSetPoint_internal);
]]></ST>
    </Implementation>
    <Method Name="GetState_AI" Id="{dc3d6fb1-9f1b-4e7f-9ecc-63053271497c}">
      <Declaration><![CDATA[METHOD GetState_AI : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF localDefaultParameters.bFeedbackSignal = TRUE THEN //Set operating point if there is a feedback signal 
	setPointState.fOperatingPoint := InputConverter.fValue;
	fOperatingPoint := setPointState.fOperatingPoint;
	setPointState.sOperatingPointUnit := 'percent';
	IF setPointState.fOperatingPoint > 0 THEN //Set control state if valve is open
		controlState.bStatusOn := TRUE;
		bStatusOn := TRUE;
	ELSE
		controlState.bStatusOn := FALSE;
		bStatusOn := FALSE;
	END_IF
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="LocalControl" Id="{1e52182a-8bdc-49bd-b2bd-13ceeb4d93b8}">
      <Declaration><![CDATA[METHOD PRIVATE LocalControl : BOOL
VAR_INPUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//set control parameters
PI_Controller_Parameters.fKp 				:= localDefaultParameters.fControllerAmplification;
PI_Controller_Parameters.tTn 				:= localDefaultParameters.tControllerIntegralTime;
PI_Controller_Parameters.fOutMaxLimit		:= localDefaultParameters.fOutMaxLimit;
PI_Controller_Parameters.fOutMinLimit		:= localDefaultParameters.fOutMinLimit;
PI_Controller_Parameters.tTaskCycleTime		:= localDefaultParameters.tTaskCycleTime;
PI_Controller_Parameters.tCtrlCycleTime		:= localDefaultParameters.tCtrlCycleTime;
PI_Controller_Parameters.bARWOnIPartOnly	:= TRUE;

IF bSetStatusOn THEN
	CASE nControlMode OF
		0: //position mode
		fSetPoint_internal := fSetPoint;
		
		1: //heating mode
		PI_Controller_Heating (
				fSetpointValue	:= fSetPoint,
				fActualValue	:= fTemperatureExternal,
				fManSyncValue	:= 0,
				bSync			:= FALSE,
				eMode			:= 2, (* mode active *)
				bHold			:= FALSE,
				stParams		:= PI_Controller_Parameters);
		fSetPoint_internal := LREAL_TO_REAL(PI_Controller_Heating.fOut);
				
		2: //cooling mode
		PI_Controller_Cooling (
			fSetpointValue	:= fTemperatureExternal,
			fActualValue	:= fSetPoint,
			fManSyncValue	:= 0,
			bSync			:= FALSE,
			eMode			:= 2, (* mode active *)
			bHold			:= FALSE,
			stParams		:= PI_Controller_Parameters);
		fSetPoint_internal := LREAL_TO_REAL(PI_Controller_Cooling.fOut);
		
		3: //thermal power
		PI_Controller_ThermalPower (
			fSetpointValue	:= ABS(fSetPoint),
			fActualValue	:= ABS(fThermalPowerExternal),
			fManSyncValue	:= 0,
			bSync			:= FALSE,
			eMode			:= 2, (* mode active *)
			bHold			:= FALSE,
			stParams		:= PI_Controller_Parameters);
		fSetPoint_internal := LREAL_TO_REAL(PI_Controller_ThermalPower.fOut);
	END_CASE
ELSE
	fSetPoint_internal := localDefaultParameters.fDefaultPosition;
END_IF


]]></ST>
      </Implementation>
    </Method>
    <Method Name="SelectLocalControlMode" Id="{69d2db34-6658-4b13-ae91-6cb6bcdc3229}">
      <Declaration><![CDATA[METHOD PRIVATE SelectLocalControlMode : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF control.bManualModeActivated THEN
	nControlMode := localSetParameters.nControlModeManual;
ELSIF control.bAlgorithmModeActivated AND bAlgorithmPermission THEN
	nControlMode := localSetParameters.nControlModeAlgorithm;
ELSE
	nControlMode := nControlModeAutomatic;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetSetPointLimits" Id="{a8c83337-88ad-4b4d-a894-cec3559c40a9}">
      <Declaration><![CDATA[METHOD PROTECTED  SetSetPointLimits : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE nControlMode OF
	0: //position mode
	aSetPointLimits := localDefaultParameters.aSetPointLimitsPosition;

	1: //heating mode
	aSetPointLimits := localDefaultParameters.aSetPointLimitsTemperature;
	
	2: //cooling mode
	aSetPointLimits := localDefaultParameters.aSetPointLimitsTemperature;
	
	3: //themal power
	aSetPointLimits := localDefaultParameters.aSetPointLimitsThermalPower;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetState_AO" Id="{be832a62-70d4-4ec0-8ee4-578237454401}">
      <Declaration><![CDATA[METHOD SetState_AO : BOOL
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[setPointState.fSetPoint := fSetPoint;
setPointState.aSetPointLimits := aSetPointLimits;
CASE nControlMode OF
	0: //position mode
	setPointState.sSetPointUnit := 'percent';
	
	1: //heating mode
	setPointState.sSetPointUnit := 'degreeC';
	
	2: //cooling mode
	setPointState.sSetPointUnit := 'degreeC';
END_CASE

nSetPoint_OUT := OutputConverter.nValue;  //converts real setpoint for terminal




]]></ST>
      </Implementation>
    </Method>
    <Property Name="ST_DefaultParameters" Id="{1a42851e-de6a-48b1-b7bd-13b0312684ce}">
      <Declaration><![CDATA[PROPERTY ST_DefaultParameters : REFERENCE TO ST_MixingValveDefaultParameters]]></Declaration>
      <Set Name="Set" Id="{a86ebf94-4f5d-419b-bd12-1e8c85044a39}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[localDefaultParameters := ST_DefaultParameters;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="FB_MixingValve">
      <LineId Id="228" Count="4" />
      <LineId Id="31" Count="0" />
    </LineIds>
    <LineIds Name="FB_MixingValve.GetState_AI">
      <LineId Id="19" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="27" Count="1" />
    </LineIds>
    <LineIds Name="FB_MixingValve.LocalControl">
      <LineId Id="99" Count="0" />
      <LineId Id="104" Count="1" />
      <LineId Id="100" Count="1" />
      <LineId Id="121" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="69" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="74" Count="6" />
      <LineId Id="46" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="84" Count="6" />
      <LineId Id="83" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="129" Count="8" />
      <LineId Id="128" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="112" Count="2" />
      <LineId Id="31" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="FB_MixingValve.SelectLocalControlMode">
      <LineId Id="6" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_MixingValve.SetSetPointLimits">
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="5" />
      <LineId Id="18" Count="2" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_MixingValve.SetState_AO">
      <LineId Id="108" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="109" Count="8" />
      <LineId Id="106" Count="1" />
      <LineId Id="69" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_MixingValve.ST_DefaultParameters.Set">
      <LineId Id="8" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>